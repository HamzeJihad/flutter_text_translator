// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_application_1/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_application_1/features/history/domain/entities/translation_history_entity.dart'
    as _i8;
import 'package:flutter_application_1/features/history/domain/repositories/translation_history_repository.dart'
    as _i3;
import 'package:flutter_application_1/features/history/domain/usecases/get_translation_history_usecase.dart'
    as _i7;
import 'package:flutter_application_1/features/history/domain/usecases/save_translations_usecase.dart'
    as _i9;
import 'package:flutter_application_1/features/translation/domain/repositories/translate_text_repository.dart'
    as _i2;
import 'package:flutter_application_1/features/translation/domain/usecases/translate_text_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTranslateTextRepository_0 extends _i1.SmartFake
    implements _i2.TranslateTextRepository {
  _FakeTranslateTextRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTranslationHistoryRepository_1 extends _i1.SmartFake
    implements _i3.TranslationHistoryRepository {
  _FakeTranslationHistoryRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

/// A class which mocks [TranslateTextUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslateTextUsecase extends _i1.Mock
    implements _i4.TranslateTextUsecase {
  MockTranslateTextUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TranslateTextRepository get translateTextRepository =>
      (super.noSuchMethod(
            Invocation.getter(#translateTextRepository),
            returnValue: _FakeTranslateTextRepository_0(
              this,
              Invocation.getter(#translateTextRepository),
            ),
          )
          as _i2.TranslateTextRepository);

  @override
  _i5.Future<String> call(_i2.TranslateTextParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<String>.value(
              _i6.dummyValue<String>(this, Invocation.method(#call, [params])),
            ),
          )
          as _i5.Future<String>);
}

/// A class which mocks [GetTranslationHistoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTranslationHistoryUsecase extends _i1.Mock
    implements _i7.GetTranslationHistoryUsecase {
  MockGetTranslationHistoryUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TranslationHistoryRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTranslationHistoryRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.TranslationHistoryRepository);

  @override
  _i5.Future<List<_i8.TranslationHistoryEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<List<_i8.TranslationHistoryEntity>>.value(
              <_i8.TranslationHistoryEntity>[],
            ),
          )
          as _i5.Future<List<_i8.TranslationHistoryEntity>>);
}

/// A class which mocks [SaveTranslationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveTranslationUsecase extends _i1.Mock
    implements _i9.SaveTranslationUsecase {
  MockSaveTranslationUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.TranslationHistoryRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeTranslationHistoryRepository_1(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i3.TranslationHistoryRepository);

  @override
  _i5.Future<void> call(_i8.TranslationHistoryEntity? translation) =>
      (super.noSuchMethod(
            Invocation.method(#call, [translation]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [TranslationHistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslationHistoryRepository extends _i1.Mock
    implements _i3.TranslationHistoryRepository {
  MockTranslationHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveTranslation(_i8.TranslationHistoryEntity? translation) =>
      (super.noSuchMethod(
            Invocation.method(#saveTranslation, [translation]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.TranslationHistoryEntity>> getHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getHistory, []),
            returnValue: _i5.Future<List<_i8.TranslationHistoryEntity>>.value(
              <_i8.TranslationHistoryEntity>[],
            ),
          )
          as _i5.Future<List<_i8.TranslationHistoryEntity>>);

  @override
  _i5.Future<void> clearHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearHistory, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
